Index: scripts/img_posting/post_img.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nfrom credentials_img_posting import insta_api, insta_user_id\r\nimport os\r\nimport sqlite3\r\nimport logging\r\nfrom google.oauth2.service_account import Credentials\r\nfrom googleapiclient.discovery import build\r\nfrom googleapiclient.http import MediaFileUpload\r\n# https://developers.facebook.com/docs/instagram-api/guides/content-publishing # insta docs\r\n\r\n\r\nclass PostImg:\r\n\r\n    @staticmethod\r\n    def setup_logging():\r\n        logging.basicConfig(filename='post_operations.log', level=logging.INFO)\r\n\r\n    def __init__(self, google_json, insta_access_token, insta_user_id, default_hashtags, db_path):\r\n        self.google_json = google_json\r\n        self.insta_access_token = insta_access_token\r\n        self.insta_user_id = insta_user_id\r\n        self.default_hashtags = default_hashtags\r\n        self.db_path = db_path\r\n        self.ids = []\r\n        self.top_post = None\r\n        self.owner_id = None\r\n        self.hashtags = None\r\n        self.public_url = ()\r\n        self.owner_username = ()\r\n    \r\n\r\n        \r\n\r\n    def connect_db(self):\r\n        try:\r\n            conn = sqlite3.connect(self.db_path)\r\n            print('db connected')\r\n            return conn\r\n        except sqlite3.Error as e:\r\n            logging.error(f\"db error: {e}\")\r\n            return None    \r\n        \r\n    def get_posted_posts(self):\r\n        ## get ids that have been posted to cross reference\r\n        try:\r\n            with open('posted_ids', 'r') as f:\r\n                self.ids = [line.strip() for line in f]\r\n        except FileNotFoundError:\r\n            logging.warning(\"posted_ids file not found\")\r\n        \r\n    def get_top_post(self):\r\n        conn = self.connect_db()\r\n        if conn:\r\n            try:\r\n                cur = conn.cursor()\r\n                cur.execute(\"SELECT MAX(LikeCount), ownerId, hashtags FROM insta_hashtag\")\r\n                self.top_post = cur.fetchone()[0]\r\n                self.owner_id = cur.fetchone()[1]\r\n                self.hashtags = cur.fetchone()[2]\r\n\r\n                while self.top_post in self.ids:\r\n                    cur.execute(\"SELECT MAX(LikeCount), ownerId, hashtags FROM insta_hashtag WHERE LikeCount < ?\", (self.top_post,))\r\n                    self.top_post = cur.fetchone()[0]\r\n                    self.owner_id = cur.fetchone()[1]\r\n                    self.hashtags = cur.fetchone()[2]\r\n\r\n                logging.info('Top post fetched')\r\n\r\n            except sqlite3.Error as e:\r\n                logging.error(f\"Database error: {e}\")\r\n        else:\r\n            logging.warning(\"Failed to connect to the database\")\r\n\r\n\r\n    def get_img(self):\r\n        # get matching img for id\r\n        self.img_path = os.path.join('downloaded_images', f'image_{self.top_post}.jpg')\r\n        if os.path.exists(self.img_path):\r\n            logging.info('Matching image fetched')\r\n        else:\r\n            logging.warning('Image not found')\r\n            self.img_path = None\r\n\r\n\r\n    def google_drive(self):\r\n        try:\r\n            credentials = Credentials.from_service_account_file(\r\n                self.google_json,\r\n                scopes=['https://www.googleapis.com/auth/drive']\r\n            )\r\n            drive_service = build('drive', 'v3', credentials=credentials)\r\n\r\n            file_metadata = {'name': os.path.basename(self.img_path)}\r\n            media = MediaFileUpload(self.img_path, mimetype='image/jpeg')\r\n            file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()\r\n\r\n            file_id = file.get('id')\r\n\r\n            # make the file publicly accessible and retrieve sharing link\r\n            file_id = file.get('id')\r\n            drive_service.permissions().create(\r\n                fileId=file_id,\r\n                body={'type': 'anyone', 'role': 'reader'},\r\n                fields='id'\r\n            ).execute()\r\n            self.public_url = f\"https://drive.google.com/uc?export=view&id={file_id}\"\r\n\r\n            logging.info(f\"Public URL: {self.public_url} has been created\")\r\n\r\n        except Exception as e:\r\n            logging.error(f\"Google Drive error: {e}\")\r\n\r\n\r\n    def get_owner_username(self):\r\n        #get username of the author\r\n        try:\r\n            owner_url = f\"https://graph.instagram.com/{self.owner_id}?fields=username&access_token={self.insta_access_token}\"\r\n            owner_response = requests.get(owner_url)\r\n            owner_data = owner_response.json()\r\n            self.owner_username = owner_data.get('username', 'Username not found')\r\n            logging.info(f'Owner username acquired: {self.owner_username}')\r\n\r\n        except requests.RequestException as e:\r\n            logging.error(f\"Request error: {e}\")\r\n\r\n    def generate_caption(self):\r\n        #get hashtags from post or if none default\r\n        if self.hashtags == None:\r\n            self.hashtags == self.default_hashtags\r\n            print('post has no hastags')\r\n        \r\n        self.caption = f'''⅋ \uD83E\uDEA1\r\n\r\n                        Via. {self.owner_username}\r\n\r\n                        —————————————————-\r\n                        \uD835\uDE0D\uD835\uDE30\uD835\uDE2D\uD835\uDE2D\uD835\uDE30\uD835\uDE38 @clavext \uD835\uDE27\uD835\uDE30\uD835\uDE33 \uD835\uDE2E\uD835\uDE30\uD835\uDE33\uD835\uDE26 \uD835\uDE24\uD835\uDE30\uD835\uDE2F\uD835\uDE35\uD835\uDE26\uD835\uDE2F\uD835\uDE35\r\n                        .\r\n                        .\r\n                        .\r\n                        .\r\n                        .\r\n                        .\r\n                        .\r\n                        .\r\n                        {self.hashtags}'''\r\n        \r\n\r\n    def insta_api_post(self):\r\n\r\n        url = f\"https://graph.facebook.com/v18.0/{self.insta_user_id}/media\"\r\n        # create container\r\n        params = {\r\n            'image_url': self.public_url,\r\n            'caption': self.caption,\r\n            'access_token': self.insta_access_token\r\n        }\r\n        try:\r\n            response = requests.post(url, params=params)\r\n            print(response.json())\r\n            # grabs media object id\r\n            container_id = response.json().get('id', 'ID not found')\r\n            #publish pic\r\n            publish_url = f\"https://graph.facebook.com/v18.0/{self.insta_user_id}/media_publish?creation_id={container_id}&access_token={self.insta_access_token}\"\r\n\r\n            response = requests.post(publish_url)\r\n            logging.info(response.json())\r\n            print(f'post has been created: {publish_url}')\r\n            # create a file that add posted ids into it\r\n            with open('posted_ids', 'a') as f:\r\n                f.write(str(self.top_post) + '\\n')\r\n\r\n        except requests.RequestException as e:\r\n            logging.error(f\"Request error: {e}\")\r\n\r\n \r\nconfig = {\r\n    \"google_json\": \"D:/coding/instagram/scripts/insta-401020-d2b56e3d4162.json\",\r\n    \"insta_access_token\": insta_api,\r\n    \"insta_user_id\": insta_user_id,\r\n    \"default_hashtags\": [\"gorpcore\",\"outerwear\", \"gorp\", \"gorpcorefashion\", \"outdoors\", \r\n                         \"arcteryx\", \"salomon\", \"gorpcorefashion\", \"gorpcorestyle\", \"functionalarchive\", \r\n                         \"ootd\", \"explore\", \"getoutside\"],\r\n    \"db_path\": \"D:\\coding\\instagram\\scripts\\insta_hashtag.db\"\r\n}\r\nif __name__ == \"__main__\":\r\n    PostImg.setup_logging()\r\n    post = PostImg(**config)\r\n    post.get_posted_posts()\r\n    post.get_top_post()\r\n    post.get_img()\r\n    post.google_drive()\r\n    post.get_owner_username()\r\n    post.generate_caption()\r\n    post.insta_api_post()\r\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scripts/img_posting/post_img.py b/scripts/img_posting/post_img.py
--- a/scripts/img_posting/post_img.py	(revision c466a49a91538149057fdac24ba6add262419fb4)
+++ b/scripts/img_posting/post_img.py	(date 1697575486291)
@@ -27,9 +27,7 @@
         self.hashtags = None
         self.public_url = ()
         self.owner_username = ()
-    
 
-        
 
     def connect_db(self):
         try:
@@ -47,40 +45,36 @@
                 self.ids = [line.strip() for line in f]
         except FileNotFoundError:
             logging.warning("posted_ids file not found")
-        
+
     def get_top_post(self):
         conn = self.connect_db()
         if conn:
-            try:
-                cur = conn.cursor()
-                cur.execute("SELECT MAX(LikeCount), ownerId, hashtags FROM insta_hashtag")
-                self.top_post = cur.fetchone()[0]
-                self.owner_id = cur.fetchone()[1]
-                self.hashtags = cur.fetchone()[2]
-
-                while self.top_post in self.ids:
-                    cur.execute("SELECT MAX(LikeCount), ownerId, hashtags FROM insta_hashtag WHERE LikeCount < ?", (self.top_post,))
-                    self.top_post = cur.fetchone()[0]
-                    self.owner_id = cur.fetchone()[1]
-                    self.hashtags = cur.fetchone()[2]
-
-                logging.info('Top post fetched')
-
-            except sqlite3.Error as e:
-                logging.error(f"Database error: {e}")
-        else:
-            logging.warning("Failed to connect to the database")
-
+            cur = conn.cursor()
+            cur.execute("SELECT MAX(likesCount), ownerId, hashtags FROM insta_hashtag")
+            row = cur.fetchone()
+            # loop till it finds post with a downloaded photo
+            while row:
+                self.top_post, self.owner_id, self.hashtags = row
+                if self.top_post not in self.ids:
+                    img_path = os.path.join('downloaded_images', f'image_{self.top_post}.jpg')
+                    if os.path.exists(img_path):
+                        break
+                # Fetch the next row
+                cur.execute("SELECT MAX(likesCount), ownerId, hashtags FROM insta_hashtag WHERE likesCount < ?",
+                            (self.top_post,))
+                row = cur.fetchone()
+            else:
+                print("No more rows to fetch.")
+                logging.info('No more rows to fetch')
 
     def get_img(self):
-        # get matching img for id
         self.img_path = os.path.join('downloaded_images', f'image_{self.top_post}.jpg')
         if os.path.exists(self.img_path):
             logging.info('Matching image fetched')
+            print('Matching image fetched')
         else:
             logging.warning('Image not found')
-            self.img_path = None
-
+            print('Image not found')
 
     def google_drive(self):
         try:
@@ -144,38 +138,46 @@
                         .
                         .
                         {self.hashtags}'''
-        
 
     def insta_api_post(self):
-
         url = f"https://graph.facebook.com/v18.0/{self.insta_user_id}/media"
-        # create container
         params = {
             'image_url': self.public_url,
             'caption': self.caption,
             'access_token': self.insta_access_token
         }
+
         try:
             response = requests.post(url, params=params)
-            print(response.json())
-            # grabs media object id
-            container_id = response.json().get('id', 'ID not found')
-            #publish pic
-            publish_url = f"https://graph.facebook.com/v18.0/{self.insta_user_id}/media_publish?creation_id={container_id}&access_token={self.insta_access_token}"
+            json_response = response.json()
+
+            logging.info(json_response)
+
+            if 'id' in json_response:
+                container_id = int(json_response['id'])
+
+                publish_url = f"https://graph.facebook.com/v18.0/{self.insta_user_id}/media_publish?creation_id={container_id}&access_token={self.insta_access_token}"
 
-            response = requests.post(publish_url)
-            logging.info(response.json())
-            print(f'post has been created: {publish_url}')
-            # create a file that add posted ids into it
-            with open('posted_ids', 'a') as f:
-                f.write(str(self.top_post) + '\n')
+                response = requests.post(publish_url)
+                logging.info(response.json())
+
+                print(f"Post has been created: {publish_url}")
+
+                with open('posted_ids', 'a') as f:
+                    f.write(str(self.top_post) + '\n')
 
+            else:
+                logging.error(f"ID not found in response: {json_response}")
+
         except requests.RequestException as e:
             logging.error(f"Request error: {e}")
+        except ValueError as ve:
+            logging.error(f"Value error: {ve}")
+
 
  
 config = {
-    "google_json": "D:/coding/instagram/scripts/insta-401020-d2b56e3d4162.json",
+    "google_json": "D:/coding/instagram/scripts/private/insta-401020-8a55316147d7.json",
     "insta_access_token": insta_api,
     "insta_user_id": insta_user_id,
     "default_hashtags": ["gorpcore","outerwear", "gorp", "gorpcorefashion", "outdoors", 
Index: scripts/img_posting/google_drive_script.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'''\r\nto upload imgs through the graph api the img file is required to be publicy available through a url. \r\nthis script uploads it to a google drive\r\n'''\r\nimport os\r\nfrom google.oauth2.service_account import Credentials\r\nfrom googleapiclient.discovery import build\r\nfrom googleapiclient.http import MediaFileUpload\r\n\r\n\r\n# load the service account credentials from json file\r\ncredentials = Credentials.from_service_account_file(\r\n    \"D:/coding/instagram/scripts/insta-401020-d2b56e3d4162.json\",\r\n    scopes=['https://www.googleapis.com/auth/drive']\r\n)\r\n\r\n# Build the service object\r\ndrive_service = build('drive', 'v3', credentials=credentials)\r\n\r\ndef upload_to_drive(filename):\r\n    file_metadata = {'name': os.path.basename(filename)}\r\n    media = MediaFileUpload(filename, mimetype='image/jpeg')\r\n    file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()\r\n\r\n    # make the file publicly accessible and retrieve sharing link\r\n    file_id = file.get('id')\r\n    drive_service.permissions().create(\r\n        fileId=file_id,\r\n        body={'type': 'anyone', 'role': 'reader'},\r\n        fields='id'\r\n    ).execute()\r\n\r\n    return f\"https://drive.google.com/uc?export=view&id={file_id}\"\r\n\r\nimage_path = \"D:/coding/instagram/scripts/downloaded_images/3198999631903343625.jpg\"\r\npublic_url = upload_to_drive(image_path)\r\nprint(f\"Public URL: {public_url}\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scripts/img_posting/google_drive_script.py b/scripts/img_posting/google_drive_script.py
--- a/scripts/img_posting/google_drive_script.py	(revision c466a49a91538149057fdac24ba6add262419fb4)
+++ b/scripts/img_posting/google_drive_script.py	(date 1697571475681)
@@ -10,7 +10,7 @@
 
 # load the service account credentials from json file
 credentials = Credentials.from_service_account_file(
-    "D:/coding/instagram/scripts/insta-401020-d2b56e3d4162.json",
+    "D:/coding/instagram/scripts/private/insta-401020-8a55316147d7.json",
     scopes=['https://www.googleapis.com/auth/drive']
 )
 
@@ -32,6 +32,7 @@
 
     return f"https://drive.google.com/uc?export=view&id={file_id}"
 
-image_path = "D:/coding/instagram/scripts/downloaded_images/3198999631903343625.jpg"
+image_path = "D:/coding/instagram/downloaded_images/image_3094522613937039091.jpg"
 public_url = upload_to_drive(image_path)
 print(f"Public URL: {public_url}")
+
Index: db_operations.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/db_operations.log b/db_operations.log
new file mode 100644
--- /dev/null	(date 1697407302268)
+++ b/db_operations.log	(date 1697407302268)
@@ -0,0 +1,81 @@
+INFO:httpx:HTTP Request: POST https://api.apify.com/v2/acts/apify~instagram-hashtag-scraper/runs "HTTP/1.1 201 Created"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/rcyehd7eW2yFL1pwp?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/rcyehd7eW2yFL1pwp?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/rcyehd7eW2yFL1pwp?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/rcyehd7eW2yFL1pwp?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/rcyehd7eW2yFL1pwp?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/datasets/zNGispY0rhFZdGqhB/items?offset=0&limit=1000 "HTTP/1.1 200 OK"
+INFO:root:Skipped 797 posts
+INFO:root:Fetched 3 items
+INFO:httpx:HTTP Request: POST https://api.apify.com/v2/acts/apify~instagram-hashtag-scraper/runs "HTTP/1.1 201 Created"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/KyQLZTzqUElttcBMa?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/KyQLZTzqUElttcBMa?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/KyQLZTzqUElttcBMa?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/KyQLZTzqUElttcBMa?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/KyQLZTzqUElttcBMa?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/KyQLZTzqUElttcBMa?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/datasets/KjD413xvegoAWChZW/items?offset=0&limit=1000 "HTTP/1.1 200 OK"
+INFO:root:Skipped 1584 posts
+INFO:root:Fetched 16 items
+INFO:httpx:HTTP Request: POST https://api.apify.com/v2/acts/apify~instagram-hashtag-scraper/runs "HTTP/1.1 201 Created"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/1SAWVf4vrQoZMfm6P?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/1SAWVf4vrQoZMfm6P?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/1SAWVf4vrQoZMfm6P?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/1SAWVf4vrQoZMfm6P?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/1SAWVf4vrQoZMfm6P?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/1SAWVf4vrQoZMfm6P?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/datasets/NuwL8M48kLbKNwdiA/items?offset=0&limit=1000 "HTTP/1.1 200 OK"
+INFO:root:Skipped 2368 posts
+INFO:root:Fetched 32 items
+INFO:httpx:HTTP Request: POST https://api.apify.com/v2/acts/apify~instagram-hashtag-scraper/runs "HTTP/1.1 201 Created"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/O9V9A1au4cnlmATjZ?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/O9V9A1au4cnlmATjZ?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/O9V9A1au4cnlmATjZ?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/O9V9A1au4cnlmATjZ?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/O9V9A1au4cnlmATjZ?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/O9V9A1au4cnlmATjZ?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/datasets/A3JgljBsgYa8sygfc/items?offset=0&limit=1000 "HTTP/1.1 200 OK"
+INFO:root:Skipped 3155 posts
+INFO:root:Fetched 44 items
+INFO:httpx:HTTP Request: POST https://api.apify.com/v2/acts/apify~instagram-hashtag-scraper/runs "HTTP/1.1 201 Created"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/qaahzfdG9mcXqNylE?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/qaahzfdG9mcXqNylE?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/qaahzfdG9mcXqNylE?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/qaahzfdG9mcXqNylE?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/qaahzfdG9mcXqNylE?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/qaahzfdG9mcXqNylE?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/qaahzfdG9mcXqNylE?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/datasets/k3yId1SuEVk6eEgMv/items?offset=0&limit=1000 "HTTP/1.1 200 OK"
+INFO:root:Skipped 3952 posts
+INFO:root:Fetched 47 items
+INFO:httpx:HTTP Request: POST https://api.apify.com/v2/acts/apify~instagram-hashtag-scraper/runs "HTTP/1.1 201 Created"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/o1M3s0adW4AJReGjb?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/o1M3s0adW4AJReGjb?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/o1M3s0adW4AJReGjb?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/o1M3s0adW4AJReGjb?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/o1M3s0adW4AJReGjb?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/o1M3s0adW4AJReGjb?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/datasets/NN6mKtnJKIxJ5PNk9/items?offset=0&limit=1000 "HTTP/1.1 200 OK"
+INFO:root:Skipped 4747 posts
+INFO:root:Fetched 52 items
+INFO:httpx:HTTP Request: POST https://api.apify.com/v2/acts/apify~instagram-hashtag-scraper/runs "HTTP/1.1 201 Created"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/HEBQ2St6jzlgBRkeI?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/HEBQ2St6jzlgBRkeI?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/HEBQ2St6jzlgBRkeI?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/HEBQ2St6jzlgBRkeI?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/HEBQ2St6jzlgBRkeI?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/datasets/b5LozUduc3PXVvbff/items?offset=0&limit=1000 "HTTP/1.1 200 OK"
+INFO:root:Skipped 5531 posts
+INFO:root:Fetched 68 items
+INFO:httpx:HTTP Request: POST https://api.apify.com/v2/acts/apify~instagram-hashtag-scraper/runs "HTTP/1.1 201 Created"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/aab8jQ3I69pm6romg?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/aab8jQ3I69pm6romg?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/aab8jQ3I69pm6romg?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/aab8jQ3I69pm6romg?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/actor-runs/aab8jQ3I69pm6romg?waitForFinish=999999 "HTTP/1.1 200 OK"
+INFO:httpx:HTTP Request: GET https://api.apify.com/v2/datasets/QJdDNqYkgsOPYDayJ/items?offset=0&limit=1000 "HTTP/1.1 200 OK"
+INFO:root:Skipped 6331 posts
+INFO:root:Fetched 68 items
+INFO:root:47 rows inserted
+INFO:root:db summary: 171 rows in total
+INFO:root:Successfully downloaded 0 out of 0 images
Index: scripts/img_posting/credentials_img_posting.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scripts/img_posting/credentials_img_posting.py b/scripts/img_posting/credentials_img_posting.py
new file mode 100644
--- /dev/null	(date 1697571724437)
+++ b/scripts/img_posting/credentials_img_posting.py	(date 1697571724437)
@@ -0,0 +1,5 @@
+APIFY_API_KEY = "apify_api_VfYMRA9EmVQQVcirL4sjgG9s39Y1AD3UVvwZ"
+insta_user = 'clave.xt'
+insta_password = 'Fuckhtmlrat'
+insta_api = 'EAAPRAXRSsOQBOxEWsBm3pKIamnosVZCYO1GfzcfozLawXevtDPZCbwATJZAiAJdfCyVdZCElLfarcVpdv9Yd5RZBHA9xTtE8Hm24vDhFwfZBZA37YQuiyaPP9jO1JA8FxTxe8XdZCfKxTeECdax9bZCK0QByqa39rPh4S7k6K7uOe4GQ8G2MZBLrrxTatAWqMAPM6KlIUO3ljoqxdircom7lA0n5QsiyWZBUnTXaCWmFC9OtIRD'
+insta_user_id = '17841461285196685'
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1697402998142)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1697402998142)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1697402998092)
+++ b/.idea/vcs.xml	(date 1697402998092)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1697402998109)
+++ b/.idea/misc.xml	(date 1697402998109)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/instagram.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/instagram.iml b/.idea/instagram.iml
new file mode 100644
--- /dev/null	(date 1697402998034)
+++ b/.idea/instagram.iml	(date 1697402998034)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: scripts/data_pull/credentials_data_pull.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scripts/data_pull/credentials_data_pull.py b/scripts/data_pull/credentials_data_pull.py
new file mode 100644
--- /dev/null	(date 1697403157236)
+++ b/scripts/data_pull/credentials_data_pull.py	(date 1697403157236)
@@ -0,0 +1,5 @@
+APIFY_API_KEY = "apify_api_VfYMRA9EmVQQVcirL4sjgG9s39Y1AD3UVvwZ"
+insta_user = 'clave.xt'
+insta_password = 'Fuckhtmlrat'
+insta_api = 'EAAPRAXRSsOQBO9i05pyiXzKYyxJg7DHvMT1r7JtIr63eR0V0eWGCBunakhDMZC2DazAxG46ZBVIHsJBEz8YJbBbZAXZCCIr27PoQSe86p7aQUbyiQWMkVKjXAqC4vLY6i2ibZCYys4w4cvnLY3BEYuZAFeV4vxV66u4GQAkq0rXUrSAqThL7BbOaZBndp12rUl9aLoACPQyTs3P3HoxPfgPGAKaVuZARLIRbpKPuZAL9b7MZBM'
+insta_user_id = '17841461285196685'
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1697402998067)
+++ b/.idea/modules.xml	(date 1697402998067)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/instagram.iml" filepath="$PROJECT_DIR$/.idea/instagram.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: scripts/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scripts/.gitignore b/scripts/.gitignore
--- a/scripts/.gitignore	(revision c466a49a91538149057fdac24ba6add262419fb4)
+++ b/scripts/.gitignore	(date 1697570469915)
@@ -1,0 +1,13 @@
+credentials.py
+session.json
+insta_hashtag.db
+insta_hashtag_data.db
+insta_hashtag_data1
+insta_hashtag_data1.db
+downloaded_images
+config
+__pycache__
+.ipynb_checkpoints
+xml
+credentials_img_posting.py
+credentials_data_pull.py
\ No newline at end of file
